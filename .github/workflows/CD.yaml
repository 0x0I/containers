name: Containers Continuous-Deployment
run-name: CD ${{ github.repository }} - ${{ github.ref }} job ðŸš€
on:
  push:
    branches: [ main ]
jobs:
  Build-Deploy-Image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Identify changed application subdirectories
        id: changed-dirs
        uses: tj-actions/changed-files@v35
        with:
          dir_names: "true"
          dir_names_max_depth: "1"
          dir_names_exclude_root: "true"
          files_ignore: |
            .github
            docs

      - name: Build modified application Docker images
        run: |
          for dir in ${{ steps.changed-dirs.outputs.all_changed_files }}; do
            version=$(cat $dir/version.txt)
            docker build $dir/ --file $dir/Dockerfile --build-arg VERSION=$version --tag 0labs/$dir:$version
          done

      - name: Login to Dockerhub for release
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USR }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PWD }}
        run: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin

      - name: Publish Docker image
        run: |
          for dir in ${{ steps.changed-dirs.outputs.all_changed_files }}; do
            version=$(cat $dir/version.txt)
            docker push 0labs/$dir:$version
          done

      - name: Update application Dockerhub READMEs
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USR }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PWD }}
        run: |
          python -m pip install --upgrade pip
          pip install jinja-cli yq

          for dir in ${{ steps.changed-dirs.outputs.all_changed_files }}; do
            export name=$dir
            export version=$(cat $dir/version.txt)
            export version_info=$( { docker run --rm -e RUN_ARGS=--version 0labs/$dir:$version; } 2>&1)
            export cli_args=$( { docker run --rm -e RUN_ARGS=--help 0labs/$dir:$version; } 2>&1)

            # render configs
            export configs=""
            confs=$(cat $dir/meta.yml | yq .example_config | sed "s/\"//g")
            for c in $confs; do
              wget $c
              n=$(basename $c)
              configs="${configs}\n--- $(echo $n)\n$(cat $n)"
            done

            # render metrics
            network=local docker-compose up -d --build && sleep 5
            export metrics=""
            endpoints=$(cat $dir/meta.yml | yq .example_metrics | sed "s/\"//g")
            for m in $endpoints; do
              metrics="${metrics}$(curl $m)"
            done
            export logs=$(docker-compose logs --tail 50)
            docker-compose down

            jinja -E name -E version_info -E cli_args -E configs -E metrics -E logs docs/dockerhub-readme.md.j2 -o dockerhub-readme-$dir.md
        
            docker run --rm -v $(pwd)/dockerhub-readme-$dir.md:/data/README.md \
              -e DOCKERHUB_USR=$DOCKERHUB_USER \
              -e DOCKERHUB_PWD=$DOCKERHUB_PASSWORD \
              -e DOCKERHUB_ORG=0labs \
              -e DOCKERHUB_REPO=$dir gofunky/readmyhub:stable
          done
